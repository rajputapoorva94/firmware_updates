name: Update Firmware Metadata

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Firmware tag name'
        required: true

jobs:
  update-metadata:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout firmware_updates
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set tag name
        run: |

            if [ "${{ github.event_name }}" = "release" ]; then
              echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
            else
              echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
            fi
            env;
            GITHUB_ENV: ${{ github.env }}

      - name: Get release info
        id: release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          result-encoding: string
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: process.env.TAG_NAME
            });
            core.setOutput('result', JSON.stringify(release.data));
        env:
          TAG_NAME: ${{ env.TAG_NAME }}

      - name: Generate firmware.json
        run: |
          echo '${{ steps.release.outputs.result }}' > release.json
           jq -r --arg version "$TAG_NAME" '
          {
              version: $version,
              firmwares: (
               [ .assets[] | { key: (.name | split("_")[0]), value: { filename: .name, url: .browser_download_url } } ]
               | from_entries
             )
          }' < release.json | jq -s '.[0] + .[1]' --argjson release '${{ steps.release.outputs.result }}' --arg tag_name "$TAG_NAME" --arg version "${{ steps.release.outputs.result.version }}" --arg date "${{ steps.release.outputs.result.published_at }}" --arg body "${{ steps.release.outputs.result.body }}" |
           ' release.json > firmware.json
      - name: Clone firmware-meta repo
        uses: actions/checkout@v4
        with:
          repository: rajputapoorva94/firmware-meta
          token: ${{ secrets.PAT_TOKEN }}
          path: meta

      - name: Copy and Commit firmware.json
        run: |
          cp firmware.json meta/
          cd meta
          git config user.name "GitHub Action"
          git config user.email "actions@github.com"
          git add firmware.json
          git commit -m "Update firmware metadata for $TAG_NAME" || echo "No changes to commit"
          git push