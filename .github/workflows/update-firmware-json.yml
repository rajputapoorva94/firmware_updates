name: Update Firmware Metadata

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Firmware tag name'
        required: true

jobs:
  update-metadata:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout firmware_updates
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          echo "::group::Install jq"
          sudo apt-get update && sudo apt-get install -y jq
          jq --version
          echo "::endgroup::"

      - name: Set tag name
        id: set_tag
        run: |
          echo "::group::Set tag name"
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
            echo "Set tag name from release event: ${{ github.ref_name }}"
          else
            echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
            echo "Set tag name from workflow_dispatch input: ${{ github.event.inputs.tag_name }}"
          fi
          echo "::endgroup::"

      - name: Debug tag name
        run: echo "TAG_NAME is $TAG_NAME"

      - name: Get release info
        id: release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          result-encoding: string
          script: |
            core.startGroup('Get Release Info');
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: process.env.TAG_NAME
            });
            core.info(`Release fetched: ${JSON.stringify(release.data, null, 2)}`);
            const json = JSON.stringify(release.data);
            core.setOutput('result', json);
            core.endGroup();
            return json;
        env:
          TAG_NAME: ${{ env.TAG_NAME }}

      - name: Print release step output
        run: |
          echo "::group::Print release step output"
          echo "release.outputs.result=${{ steps.release.outputs.result }}"
          echo "::endgroup::"

      - name: Write release.json
        run: |
          echo "::group::Write release.json"
          if [ -z "${{ steps.release.outputs.result }}" ]; then
            echo '{}' > release.json
            echo "No release info, wrote empty JSON"
          else
            echo '${{ steps.release.outputs.result }}' > release.json
            echo "Wrote release info to release.json"
          fi
          echo "::endgroup::"

      - name: Debug release.json
        run: |
          echo "::group::Debug release.json"
          cat release.json
          echo "::endgroup::"

      - name: Generate firmware.json
        run: |
          echo "::group::Generate firmware.json"
          set -x
          if jq empty release.json; then
            jq -r --arg version "$TAG_NAME" '
              {
                version: $version,
                firmwares: (
                  [ .assets[] | { key: (.name | split("_")[0]), value: { filename: .name, url: .browser_download_url } } ]
                  | from_entries
                )
              }
            ' release.json > firmware.json
            echo "Generated firmware.json:"
            cat firmware.json
          else
            echo "release.json is not valid JSON. Exiting."
            cat release.json
            exit 1
          fi
          set +x
          echo "::endgroup::"

      - name: Clone firmware-meta repo
        uses: actions/checkout@v4
        with:
          repository: rajputapoorva94/firmware-meta
          token: ${{ secrets.PAT_TOKEN }}
          path: meta

      - name: Copy and Commit firmware.json
        run: |
          echo "::group::Copy and Commit firmware.json"
          cp firmware.json meta/
          cd meta
          git config user.name "GitHub Action"
          git config user.email "actions@github.com"
          git status
          git add firmware.json
          git status
          git commit -m "Update firmware metadata for $TAG_NAME" || echo "No changes to commit"
          git push
          echo "::endgroup::"

      - name: Debug meta repo contents
        run: |
          echo "::group::Debug meta repo contents"
          ls -l meta/
          git -C meta log --oneline -n 3
          echo "::endgroup::"